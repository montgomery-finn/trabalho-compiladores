/* Generated By:JJTree&JavaCC: Do not edit this line. CompiladorAula.java */
package parser;
import recovery.*;

public class CompiladorAula/*@bgen(jjtree)*/implements CompiladorAulaTreeConstants, CompiladorAulaConstants {/*@bgen(jjtree)*/
  protected static JJTCompiladorAulaState jjtree = new JJTCompiladorAulaState();public static void main(String args []) throws ParseException
  {
    CompiladorAula parser = new CompiladorAula(System.in);
    while (true)
    {
      System.out.println("Escreva um program.a..");
      System.out.print("------ > ");

      SimpleNode n = CompiladorAula.main();
      n.dump(" ");
      try
      {
        /*switch (CompiladorAula.main())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }*/
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        CompiladorAula.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static public String im(int x)
  {
    int k;
        String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\u005c"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
           {}
   return s;
  }

  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
                         ParseException e,
                         String met) throws ParseEOFException,
                                            ParseException
  {
        Token tok;
        System.out.println();
        System.out.println("*** " + met + " ***");
        System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto é null, propaga a exceção

        tok = getToken(1); // pega token corrente
        while ( ! eof ) { // se não chegou ao fim do arquivo
          if ( g.contains(tok.kind)) {//achou um token no conjunto
            System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                               im(tok.kind));
            break;
          }
          System.out.println("     Ignorando o token: " + im(tok.kind));
          getNextToken();     // pega próximo token       
      tok = getToken(1);
          if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
              eof = true;
        }
    if ( tok != lastError)  {
          System.out.println(e.getMessage());
          lastError = tok;

        }
        if ( eof )
          throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  static final public SimpleNode main() throws ParseException {
 /*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      eraUmaVez();
      bloco();
      eViveramFelizesParaSempre();
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void eraUmaVez() throws ParseException {
 /*@bgen(jjtree) eraUmaVez */
  SimpleNode jjtn000 = new SimpleNode(JJTERAUMAVEZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ERAUMAVEZ);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void eViveramFelizesParaSempre() throws ParseException {
 /*@bgen(jjtree) eViveramFelizesParaSempre */
  SimpleNode jjtn000 = new SimpleNode(JJTEVIVERAMFELIZESPARASEMPRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EVIVERAMFELIZESPARASEMPRE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void bloco() throws ParseException {
 /*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIPOINTEIRO:
        case TIPOBOOLEANO:
        case TIPOCARACTER:
        case SE:
        case ENQUANTO:
        case FACA:
        case LEIA:
        case ESCREVA:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIPOINTEIRO:
        case TIPOBOOLEANO:
        case TIPOCARACTER:
          tipoDeDadoEDecalaracaoDeVariaveis();
          break;
        case SE:
          condicional();
          break;
        case ENQUANTO:
          repeticaoEnquanto();
          break;
        case FACA:
          repeticaoFacaEnquanto();
          break;
        case LEIA:
          leitura();
          break;
        case ESCREVA:
          escrita();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//declaracao de variaveis
  static final public void tipoDeDadoEDecalaracaoDeVariaveis() throws ParseException {
 /*@bgen(jjtree) tipoDeDadoEDecalaracaoDeVariaveis */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODEDADOEDECALARACAODEVARIAVEIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      tipoDado();
      umaOuMaisvariaveisComOuSemAtribuicao();
      pontoEVirgula();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void umaOuMaisvariaveisComOuSemAtribuicao() throws ParseException {
 /*@bgen(jjtree) umaOuMaisvariaveisComOuSemAtribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTUMAOUMAISVARIAVEISCOMOUSEMATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RECEBE:
        atribuicaoValor();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        declaracaoDeOutraVariavel();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void atribuicaoValor() throws ParseException {
 /*@bgen(jjtree) atribuicaoValor */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAOVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      recebe();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id();
        break;
      case FALSO:
      case VERDADEIRO:
      case DECIMAL:
      case CARACTER:
        valor();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case MAIORIGUAL:
      case MENORIGUAL:
      case DIFERENTE:
      case E:
      case OU:
      case MAIOR:
      case MENOR:
      case SOMA:
      case MULTIPLICACAO:
      case SUBTRACAO:
      case DIVISAO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case MAIORIGUAL:
        case MENORIGUAL:
        case DIFERENTE:
        case E:
        case OU:
        case MAIOR:
        case MENOR:
          continuaExpressaoLogica();
          break;
        case SOMA:
        case MULTIPLICACAO:
        case SUBTRACAO:
        case DIVISAO:
          continuaOperacaoMatematica();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void declaracaoDeOutraVariavel() throws ParseException {
 /*@bgen(jjtree) declaracaoDeOutraVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAODEOUTRAVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      virgula();
      umaOuMaisvariaveisComOuSemAtribuicao();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//condicional e reptições
  static final public void condicional() throws ParseException {
 /*@bgen(jjtree) condicional */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      se();
      abreParenteses();
      expressaoLogica();
      fechaParenteses();
      abreChaves();
      bloco();
      fechaChaves();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void repeticaoEnquanto() throws ParseException {
 /*@bgen(jjtree) repeticaoEnquanto */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAOENQUANTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      enquanto();
      abreParenteses();
      expressaoLogica();
      fechaParenteses();
      abreChaves();
      bloco();
      fechaChaves();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void repeticaoFacaEnquanto() throws ParseException {
 /*@bgen(jjtree) repeticaoFacaEnquanto */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAOFACAENQUANTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      faca();
      abreChaves();
      bloco();
      fechaChaves();
      enquanto();
      abreParenteses();
      expressaoLogica();
      fechaParenteses();
      pontoEVirgula();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//expressão lógica
  static final public void expressaoLogica() throws ParseException {
 /*@bgen(jjtree) expressaoLogica */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOLOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSO:
      case VERDADEIRO:
      case ID:
      case DECIMAL:
      case CARACTER:
        idOuValor();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case MAIORIGUAL:
        case MENORIGUAL:
        case DIFERENTE:
        case E:
        case OU:
        case MAIOR:
        case MENOR:
          continuaExpressaoLogica();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        break;
      case ABREPARENTESES:
        abreParenteses();
        expressaoLogica();
        fechaParenteses();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void continuaExpressaoLogica() throws ParseException {
 /*@bgen(jjtree) continuaExpressaoLogica */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTINUAEXPRESSAOLOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      operadorLogico();
      expressaoLogica();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void operadorLogico() throws ParseException {
 /*@bgen(jjtree) operadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        igual();
        break;
      case MAIORIGUAL:
        maiorIgual();
        break;
      case MENORIGUAL:
        menorIgual();
        break;
      case MAIOR:
        maior();
        break;
      case MENOR:
        menor();
        break;
      case DIFERENTE:
        diferente();
        break;
      case E:
        e();
        break;
      case OU:
        ou();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//operação matemática
  static final public void operacaoMatematica() throws ParseException {
 /*@bgen(jjtree) operacaoMatematica */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAOMATEMATICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case DECIMAL:
        idOuDecimal();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOMA:
        case MULTIPLICACAO:
        case SUBTRACAO:
        case DIVISAO:
          continuaOperacaoMatematica();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
      case ABREPARENTESES:
        abreParenteses();
        operacaoMatematica();
        fechaParenteses();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void continuaOperacaoMatematica() throws ParseException {
 /*@bgen(jjtree) continuaOperacaoMatematica */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTINUAOPERACAOMATEMATICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      operadorMatematico();
      operacaoMatematica();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void idOuDecimal() throws ParseException {
 /*@bgen(jjtree) idOuDecimal */
  SimpleNode jjtn000 = new SimpleNode(JJTIDOUDECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id();
        break;
      case DECIMAL:
        decimal();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void operadorMatematico() throws ParseException {
 /*@bgen(jjtree) operadorMatematico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMATEMATICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        soma();
        break;
      case SUBTRACAO:
        subtracao();
        break;
      case MULTIPLICACAO:
        multiplicacao();
        break;
      case DIVISAO:
        divisao();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//leitura e escrita
  static final public void leitura() throws ParseException {
 /*@bgen(jjtree) leitura */
  SimpleNode jjtn000 = new SimpleNode(JJTLEITURA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      leia();
      abreParenteses();
      id();
      fechaParenteses();
      pontoEVirgula();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void escrita() throws ParseException {
 /*@bgen(jjtree) escrita */
  SimpleNode jjtn000 = new SimpleNode(JJTESCRITA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      escreva();
      abreParenteses();
      idOuValor();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case MAIORIGUAL:
      case MENORIGUAL:
      case DIFERENTE:
      case E:
      case OU:
      case MAIOR:
      case MENOR:
      case SOMA:
      case MULTIPLICACAO:
      case SUBTRACAO:
      case DIVISAO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case MAIORIGUAL:
        case MENORIGUAL:
        case DIFERENTE:
        case E:
        case OU:
        case MAIOR:
        case MENOR:
          continuaExpressaoLogica();
          break;
        case SOMA:
        case MULTIPLICACAO:
        case SUBTRACAO:
        case DIVISAO:
          continuaOperacaoMatematica();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      fechaParenteses();
      pontoEVirgula();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//valores
  static final public void valorBooleano() throws ParseException {
 /*@bgen(jjtree) valorBooleano */
  SimpleNode jjtn000 = new SimpleNode(JJTVALORBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERDADEIRO:
        verdadeiro();
        break;
      case FALSO:
        falso();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void idOuValor() throws ParseException {
 /*@bgen(jjtree) idOuValor */
  SimpleNode jjtn000 = new SimpleNode(JJTIDOUVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id();
        break;
      case FALSO:
      case VERDADEIRO:
      case DECIMAL:
      case CARACTER:
        valor();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void valor() throws ParseException {
 /*@bgen(jjtree) valor */
  SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL:
        decimal();
        break;
      case FALSO:
      case VERDADEIRO:
        valorBooleano();
        break;
      case CARACTER:
        caracter();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void tipoDado() throws ParseException {
 /*@bgen(jjtree) tipoDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPOINTEIRO:
        tipoInteiro();
        break;
      case TIPOBOOLEANO:
        tipoBooleano();
        break;
      case TIPOCARACTER:
        tipoCaracter();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//terminais
  static final public void pontoEVirgula() throws ParseException {
 /*@bgen(jjtree) pontoEVirgula */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTOEVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PONTOEVIRGULA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void virgula() throws ParseException {
 /*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VIRGULA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void id() throws ParseException {
 /*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoInteiro() throws ParseException {
 /*@bgen(jjtree) tipoInteiro */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOINTEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPOINTEIRO);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void tipoBooleano() throws ParseException {
 /*@bgen(jjtree) tipoBooleano */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPOBOOLEANO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void tipoCaracter() throws ParseException {
 /*@bgen(jjtree) tipoCaracter */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOCARACTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPOCARACTER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void se() throws ParseException {
 /*@bgen(jjtree) se */
  SimpleNode jjtn000 = new SimpleNode(JJTSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void abreParenteses() throws ParseException {
 /*@bgen(jjtree) abreParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABREPARENTESES);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void fechaParenteses() throws ParseException {
 /*@bgen(jjtree) fechaParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHAPARENTESES);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void igual() throws ParseException {
 /*@bgen(jjtree) igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IGUAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void maiorIgual() throws ParseException {
 /*@bgen(jjtree) maiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIORIGUAL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void menorIgual() throws ParseException {
 /*@bgen(jjtree) menorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENORIGUAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void diferente() throws ParseException {
 /*@bgen(jjtree) diferente */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIFERENTE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void e() throws ParseException {
 /*@bgen(jjtree) e */
  SimpleNode jjtn000 = new SimpleNode(JJTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(E);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ou() throws ParseException {
 /*@bgen(jjtree) ou */
  SimpleNode jjtn000 = new SimpleNode(JJTOU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OU);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void maior() throws ParseException {
 /*@bgen(jjtree) maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIOR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void menor() throws ParseException {
 /*@bgen(jjtree) menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void recebe() throws ParseException {
 /*@bgen(jjtree) recebe */
  SimpleNode jjtn000 = new SimpleNode(JJTRECEBE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RECEBE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void verdadeiro() throws ParseException {
 /*@bgen(jjtree) verdadeiro */
  SimpleNode jjtn000 = new SimpleNode(JJTVERDADEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VERDADEIRO);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void falso() throws ParseException {
 /*@bgen(jjtree) falso */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FALSO);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void abreChaves() throws ParseException {
 /*@bgen(jjtree) abreChaves */
  SimpleNode jjtn000 = new SimpleNode(JJTABRECHAVES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABRECHAVES);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void fechaChaves() throws ParseException {
 /*@bgen(jjtree) fechaChaves */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHACHAVES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHACHAVES);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void enquanto() throws ParseException {
 /*@bgen(jjtree) enquanto */
  SimpleNode jjtn000 = new SimpleNode(JJTENQUANTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENQUANTO);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void leia() throws ParseException {
 /*@bgen(jjtree) leia */
  SimpleNode jjtn000 = new SimpleNode(JJTLEIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEIA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void escreva() throws ParseException {
 /*@bgen(jjtree) escreva */
  SimpleNode jjtn000 = new SimpleNode(JJTESCREVA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ESCREVA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void caracter() throws ParseException {
 /*@bgen(jjtree) caracter */
  SimpleNode jjtn000 = new SimpleNode(JJTCARACTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CARACTER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void decimal() throws ParseException {
 /*@bgen(jjtree) decimal */
  SimpleNode jjtn000 = new SimpleNode(JJTDECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECIMAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void soma() throws ParseException {
 /*@bgen(jjtree) soma */
  SimpleNode jjtn000 = new SimpleNode(JJTSOMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SOMA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void subtracao() throws ParseException {
 /*@bgen(jjtree) subtracao */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBTRACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUBTRACAO);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void multiplicacao() throws ParseException {
 /*@bgen(jjtree) multiplicacao */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MULTIPLICACAO);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void divisao() throws ParseException {
 /*@bgen(jjtree) divisao */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVISAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIVISAO);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void faca() throws ParseException {
 /*@bgen(jjtree) faca */
  SimpleNode jjtn000 = new SimpleNode(JJTFACA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FACA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorAulaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x9c000000,0x9c000000,0x20000,0x100,0x60000000,0x3c1fe00,0x3c1fe00,0x1fe00,0x60040000,0x1fe00,0x3c00000,0x40000,0x0,0x3c00000,0x3c1fe00,0x3c1fe00,0x60000000,0x60000000,0x60000000,0x1c000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xf,0xf,0x0,0x0,0x130,0x0,0x0,0x0,0x130,0x0,0x0,0x30,0x30,0x0,0x0,0x0,0x0,0x130,0x120,0x0,};
   }

  /** Constructor with InputStream. */
  public CompiladorAula(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorAula(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorAulaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompiladorAula(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorAulaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompiladorAula(CompiladorAulaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorAulaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
